name: CI

on: [ "push", "pull_request" ]

permissions:
  contents: read

env:
  GLIBC_VERSION: 2.17

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      matrix:
        target:
          # Windows build takes forever, so break them up
          - { name: win-x64, os: windows-2025, triple: [ "x86_64-pc-windows-msvc" ] }
          - { name: win-x86, os: windows-2025, triple: [ "i686-pc-windows-msvc" ] }
          - { name: win-arm64, os: windows-2025, triple: [ "aarch64-pc-windows-msvc" ] }
          - { name: linux, os: ubuntu-24.04, triple: [ "x86_64-unknown-linux-gnu", "i686-unknown-linux-gnu", "aarch64-unknown-linux-gnu" ], install-zig: true }
          - { name: osx, os: macos-15, triple: [ "x86_64-apple-darwin", "aarch64-apple-darwin" ] }

    name: Build (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.os }}

    steps:
      - uses: lhotari/gh-actions-artifact-client@ef03990878cb292d789ee6c36b5bbc8369aa30ed # v2
      - uses: actions/checkout@v5

      - uses: actions-rust-lang/setup-rust-toolchain@1780873c7b576612439a134613cc4cc74ce5538c # v1.15.2
        with:
          toolchain: nightly
          target: ${{ join(matrix.target.triple, ' ') }}
          components: rustfmt

      - if: matrix.target.install-zig
        uses: mlugg/setup-zig@8d6198c65fb0feaa111df26e6b467fea8345e46f # v2.0.5
      - if: matrix.target.install-zig
        uses: taiki-e/install-action@41ef8c65f4034ff24ab1cc2cef52f3000bcf9523 # v2.62.40
        with:
          tool: cargo-zigbuild

      - name: Format
        run: cargo fmt --check

      - name: Build
        run: |
          for target in ${{ join(matrix.target.triple, ' ') }}; do
            echo "Building $target"
            if [[ "$target" == *"linux-gnu" ]]; then
              cargo zigbuild --release --target "$target.$GLIBC_VERSION"
            else
              cargo build --release --target "$target"              
            fi

            echo "Uploading $target"
            if [[ "$target" == *"windows"* ]]; then
              artifacts=("doorstop.dll" "doorstop_launcher.exe" "doorstop_player.exe")
            elif [[ "$target" == *"linux"* ]]; then
              artifacts=("libdoorstop.so" "doorstop_launcher" "doorstop_player")
            elif [[ "$target" == *"apple-darwin" ]]; then
              artifacts=("libdoorstop.dylib" "doorstop_launcher" "doorstop_player")
            fi
            (cd target/"$target"/release && 7z a "$target".zip ${artifacts[*]} && cat "$target".zip | gh-actions-artifact-client.js upload "$target" --retentionDays 0)
          done

      - name: Test
        run: cargo test --release

  test:
    needs: build

    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: win-x64, os: windows-2025, triple: [ "x86_64-pc-windows-msvc", "i686-pc-windows-msvc" ] }
          - { name: win-arm64, os: windows-11-arm, triple: [ "aarch64-pc-windows-msvc" ] }
          - { name: linux-x64, os: ubuntu-24.04, triple: [ "x86_64-unknown-linux-gnu", "i686-unknown-linux-gnu" ] }
          - { name: wine@linux-x64, os: ubuntu-24.04, triple: [ "x86_64-pc-windows-msvc", "i686-pc-windows-msvc" ], wine: true }
          # - { name: linux-arm64, os: ubuntu-24.04-arm, triple: [ "aarch64-unknown-linux-gnu" ] }
          - { name: osx-arm64, os: macos-15, triple: [ "x86_64-apple-darwin", "aarch64-apple-darwin" ] }

    name: Test (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.os }}

    steps:
      - uses: lhotari/gh-actions-artifact-client@ef03990878cb292d789ee6c36b5bbc8369aa30ed # v2
      - uses: actions/checkout@v5

      - name: Setup linux
        if: startsWith(matrix.target.os, 'ubuntu-')
        run: |
          # Fix AppArmor blocking SteamLinuxRuntime
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y --install-recommends gdb xvfb mesa-utils libgl1-mesa-dri:i386 libgl1:i386 libegl1:i386

      - name: Install wine
        if: matrix.target.wine
        run: |
          # Install wine
          sudo mkdir -pm755 /etc/apt/keyrings
          wget -O - https://dl.winehq.org/wine-builds/winehq.key | sudo gpg --dearmor -o /etc/apt/keyrings/winehq-archive.key -
          sudo wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/noble/winehq-noble.sources
          sudo apt-get update
          sudo apt-get install -y --install-recommends winehq-staging

      - name: Setup .NET
        uses: js6pak/setup-dotnet@d3880cac5f837959c67b5235dcecbbf2d8e7c626 # https://github.com/actions/setup-dotnet/pull/538
        with:
          global-json-file: ./DoorstopTests/global.json

      - name: Download artifacts
        run: |
          for target in ${{ join(matrix.target.triple, ' ') }}; do
            echo "Downloading $target"
            mkdir -p target/"$target"/release
            gh-actions-artifact-client.js download "$target" > /tmp/"$target".zip
            7z e /tmp/"$target".zip -otarget/"$target"/release
          done

      - name: Restore
        working-directory: ./DoorstopTests
        run: dotnet restore --locked-mode

      - name: Build
        working-directory: ./DoorstopTests
        run: dotnet build --no-restore

      - name: Format
        working-directory: ./DoorstopTests
        run: dotnet format --no-restore --verbosity diagnostic --verify-no-changes

      - name: Test
        working-directory: ./DoorstopTests
        timeout-minutes: 30
        # run: dotnet test --no-restore TODO maybe switch to this once upstream MTP concurrency issues are fixed
        run: dotnet run --no-restore --project ./DoorstopTests -- --treenode-filter "$FILTER"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILTER: ${{ startsWith(matrix.target.os, 'ubuntu-') && (matrix.target.wine && '/*/*/*/*[Platform=win]' || '/*/*/*/*[Platform!=win]') || '/*/*/*/*' }}

      - name: Upload core dumps
        if: failure() && startsWith(matrix.target.os, 'ubuntu-')
        uses: actions/upload-artifact@v5
        with:
          name: core-dumps-${{ matrix.target.name }}
          path: /tmp/core.*
          retention-days: 7
          if-no-files-found: ignore

  release:
    if: github.ref_type == 'tag'
    needs: [ build, test ]

    name: Release
    runs-on: ubuntu-24.04

    steps:
      - uses: lhotari/gh-actions-artifact-client@ef03990878cb292d789ee6c36b5bbc8369aa30ed # v2

      - name: Download artifacts
        run: |
          TARGETS=(
            "x86_64-pc-windows-msvc" "i686-pc-windows-msvc" "aarch64-pc-windows-msvc"
            "x86_64-unknown-linux-gnu" "i686-unknown-linux-gnu" "aarch64-unknown-linux-gnu"
            "x86_64-apple-darwin" "aarch64-apple-darwin"
          )

          for target in "${TARGETS[@]}"; do
            echo "Downloading $target"
            gh-actions-artifact-client.js download "$target" >doorstop-"$target".zip
          done

      - name: Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
        with:
          draft: true
          files: doorstop-*.zip
